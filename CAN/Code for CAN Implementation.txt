#EXTRACode for CAN Implementation

#include <string.h>

CAN_HandleTypeDef hcan1;

CAN_TxHeaderTypeDef TxHeader;
CAN RxHeaderTypeDef RxHeader;
uint8_t TxData[8];
uint8_t RxData[8];
CAN_FilterTypeDef filterconfig;

static void MX_CAN_Init(void);

#include <stdio.h>


static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 6;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  /* Get RX message */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
  // if (RxHeader.ExtId == 0x541) // for detecting Input identifier without Filtering
  // {
  memcpy(TxData, RxData, 8);
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // for detect data receive
  // }
  /* Reception Error */
}


  sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
  sFilterConfig.FilterIdHigh = (0x2B2);          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
  sFilterConfig.FilterIdLow = (0x2B2);                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
  sFilterConfig.FilterMaskIdHigh = (0x2B2);              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
  sFilterConfig.FilterMaskIdLow = (0x2B2);               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;


  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
  HAL_CAN_Start(&hcan1);
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // this function works like this //
HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0) ;

 while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

Then defining the function for the bit timing paramerters in void hal_can function
<Technically should work>........